// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBuffersProtocol
{

using global::System;
using global::FlatBuffers;

public struct Enemy : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Enemy GetRootAsEnemy(ByteBuffer _bb) { return GetRootAsEnemy(_bb, new Enemy()); }
  public static Enemy GetRootAsEnemy(ByteBuffer _bb, Enemy obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Enemy __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Vec3? Position { get { int o = __p.__offset(6); return o != 0 ? (Vec3?)(new Vec3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int InventoryIds(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int InventoryIdsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInventoryIdsBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetInventoryIdsBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetInventoryIdsArray() { return __p.__vector_as_array<int>(8); }
  public Weapon? Weapon { get { int o = __p.__offset(10); return o != 0 ? (Weapon?)(new Weapon()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int TeamId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Enemy> CreateEnemy(FlatBufferBuilder builder,
      int id = 0,
      Offset<Vec3> positionOffset = default(Offset<Vec3>),
      VectorOffset inventoryIdsOffset = default(VectorOffset),
      Offset<Weapon> weaponOffset = default(Offset<Weapon>),
      int teamId = 0) {
    builder.StartObject(5);
    Enemy.AddTeamId(builder, teamId);
    Enemy.AddWeapon(builder, weaponOffset);
    Enemy.AddInventoryIds(builder, inventoryIdsOffset);
    Enemy.AddPosition(builder, positionOffset);
    Enemy.AddId(builder, id);
    return Enemy.EndEnemy(builder);
  }

  public static void StartEnemy(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<Vec3> positionOffset) { builder.AddOffset(1, positionOffset.Value, 0); }
  public static void AddInventoryIds(FlatBufferBuilder builder, VectorOffset inventoryIdsOffset) { builder.AddOffset(2, inventoryIdsOffset.Value, 0); }
  public static VectorOffset CreateInventoryIdsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateInventoryIdsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartInventoryIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddWeapon(FlatBufferBuilder builder, Offset<Weapon> weaponOffset) { builder.AddOffset(3, weaponOffset.Value, 0); }
  public static void AddTeamId(FlatBufferBuilder builder, int teamId) { builder.AddInt(4, teamId, 0); }
  public static Offset<Enemy> EndEnemy(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Enemy>(o);
  }
};

public struct Vec3 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Vec3 GetRootAsVec3(ByteBuffer _bb) { return GetRootAsVec3(_bb, new Vec3()); }
  public static Vec3 GetRootAsVec3(ByteBuffer _bb, Vec3 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Vec3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Y { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Z { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<Vec3> CreateVec3(FlatBufferBuilder builder,
      float x = 0.0f,
      float y = 0.0f,
      float z = 0.0f) {
    builder.StartObject(3);
    Vec3.AddZ(builder, z);
    Vec3.AddY(builder, y);
    Vec3.AddX(builder, x);
    return Vec3.EndVec3(builder);
  }

  public static void StartVec3(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddX(FlatBufferBuilder builder, float x) { builder.AddFloat(0, x, 0.0f); }
  public static void AddY(FlatBufferBuilder builder, float y) { builder.AddFloat(1, y, 0.0f); }
  public static void AddZ(FlatBufferBuilder builder, float z) { builder.AddFloat(2, z, 0.0f); }
  public static Offset<Vec3> EndVec3(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Vec3>(o);
  }
};

public struct Weapon : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Weapon GetRootAsWeapon(ByteBuffer _bb) { return GetRootAsWeapon(_bb, new Weapon()); }
  public static Weapon GetRootAsWeapon(ByteBuffer _bb, Weapon obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Weapon __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AmmoCapacity { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Weapon> CreateWeapon(FlatBufferBuilder builder,
      int id = 0,
      int ammo_capacity = 0) {
    builder.StartObject(2);
    Weapon.AddAmmoCapacity(builder, ammo_capacity);
    Weapon.AddId(builder, id);
    return Weapon.EndWeapon(builder);
  }

  public static void StartWeapon(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddAmmoCapacity(FlatBufferBuilder builder, int ammoCapacity) { builder.AddInt(1, ammoCapacity, 0); }
  public static Offset<Weapon> EndWeapon(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Weapon>(o);
  }
};


}
